#
# TODO:
#  - detect whether there was a release created (over in release-please.yml)
#  based on commit message, and use that to trigger an upload to quay.io,
#  after building the images again here.
#
# NOTES:
#  - export env vars to GITHUB_ENV so that upload/download artifacts have access
#  - artifacts cannot have ":" in filenames
#

name: Build images
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  pull_request:
    paths-ignore:
    - '.circleci/**'
    - 'docs/**'
    - 'test/**'

env:
  BIOCONDA_UTILS_VERSION: ${{ github.event.release && github.event.release.tag_name || github.head_ref || github.ref_name }}

jobs:

  # JOBS FOR BUILDING IMAGES
  # ----------------------------------------------------------------------
  # Build images for all archs, upload as artifacts.

  # Inspect quay.io to see which, if any, of the images we're trying to build
  # are already on quay.io. Export the results so they can be seen by other rules.
  detect-existing:
    name: detect-existing
    runs-on: ubuntu-24.04
    outputs:
      DO_BUILD: ${{ steps.detect-existing.outputs.DO_BUILD }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect existing
        id: detect-existing
        run: |
          source images/image_config.sh
          source images/env_var_inventory.sh

          # Skip build if *all* versions exist on quay.io. Otherwise we will do
          # the entire build.
          if tag_exists $BASE_BUSYBOX_IMAGE_NAME $BASE_TAG \
          && tag_exists $BASE_DEBIAN_IMAGE_NAME $BASE_TAG \
          && tag_exists $BUILD_ENV_IMAGE_NAME $BIOCONDA_IMAGE_TAG \
          && tag_exists $CREATE_ENV_IMAGE_NAME $BIOCONDA_IMAGE_TAG; then
            echo "DO_BUILD=false" >> $GITHUB_OUTPUT
          else
            echo "DO_BUILD=true" >> $GITHUB_OUTPUT
          fi

  build-images:
    name: Build all images with podman
    runs-on: ubuntu-24.04
    needs: [ detect-existing ]
    if: ${{ needs.detect-existing.outputs.DO_BUILD == 'true' }}
    container:
      # travier/podman-action contains newer podman/buildah versions.
      image: quay.io/travier/podman-action
      options: --privileged

    steps:

    - name: Initial setup of podman-action container
      run: |
        podman run --rm --privileged docker.io/tonistiigi/binfmt --install arm64
        dnf install -qy jq git

        rpm -q \
          buildah podman \
          coreutils findutils sed \
          curl jq git |
          (
            while read -r line; do
              printf %s\\n "${line}"
              case "${line}" in *' not installed'*)
                err=1
                ;;
              esac
            done
            exit "${err-0}"
          )

    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: build all images
      run: |
        ls
        source images/image_config.sh
        cd images
        time bash build.sh base-glibc-busybox-bash
        time bash build.sh base-glibc-debian-bash
        time bash build.sh build-env
        time bash build.sh create-env

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: image-artifacts
        path: |
          image-artifacts/

  test:
    name: test bioconda-utils with images
    runs-on: ubuntu-24.04

    # Start a local docker registry. Podman/buildah will push manifests and
    # images here for docker to use within bioconda-utils
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    needs: [ build-images ]
    steps:

    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: export env vars marked as GITHUB_ENV
      run: |
        source images/image_config.sh
        for var in $(grep "# GITHUB_ENV$" images/image_config.sh | cut -f1 -d "="); do
          echo "$var=${!var}" >> $GITHUB_ENV
        done

    - name: Install bioconda-utils
      run: |
        export BIOCONDA_DISABLE_BUILD_PREP=1

        # TODO: change to master when done with PR
        BRANCH=simplify-unify-containers
        wget https://raw.githubusercontent.com/bioconda/bioconda-common/${BRANCH}/{common,install-and-set-up-conda,configure-conda}.sh

        source images/image_config.sh

        # Ensure install-and-set-up-conda uses same version as in the container
        # (which uses images/image_config.sh)
        export BIOCONDA_UTILS_TAG=$BIOCONDA_UTILS_VERSION
        bash install-and-set-up-conda.sh
        eval "$(conda shell.bash hook)"
        conda create -n bioconda -y --file test-requirements.txt --file bioconda_utils/bioconda_utils-requirements.txt
        conda activate bioconda
        python setup.py install

    - name: Download images as artifacts
      uses: actions/download-artifact@v4
      with:
        name: image-artifacts
        path: image-artifacts

    - name: Load image artifacts into podman
      run: |
          for image in image-artifacts/*.tar; do
            podman load -i $image
          done

    - name: Build & push manifests to local docker registry
      run: |
        source images/image_config.sh
        source images/env_var_inventory.sh

        podman images

        set -x

        build_and_push_manifest ${BASE_DEBIAN_IMAGE_NAME}:${BASE_TAG} docker://localhost:5000
        build_and_push_manifest ${BASE_BUSYBOX_IMAGE_NAME}:${BASE_TAG} docker://localhost:5000
        build_and_push_manifest ${CREATE_ENV_IMAGE_NAME}:${BIOCONDA_IMAGE_TAG} docker://localhost:5000
        build_and_push_manifest ${BUILD_ENV_IMAGE_NAME}:${BIOCONDA_IMAGE_TAG} docker://localhost:5000

        # Make sure we can get them back into the docker runtime
        docker pull localhost:5000/${BASE_DEBIAN_IMAGE_NAME}:${BASE_TAG}
        docker pull localhost:5000/${BASE_DEBIAN_IMAGE_NAME}:${BASE_TAG}
        docker pull localhost:5000/${BASE_BUSYBOX_IMAGE_NAME}:${BASE_TAG}
        docker pull localhost:5000/${CREATE_ENV_IMAGE_NAME}:${BIOCONDA_IMAGE_TAG}
        docker pull localhost:5000/${BUILD_ENV_IMAGE_NAME}:${BIOCONDA_IMAGE_TAG}

        docker images

    - name: test
      run: |
        eval "$(conda shell.bash hook)"
        conda activate bioconda

        # Tell mulled-build which image to use
        #
        # The follwing env vars are searched for by mulled-build:
        #   - DEST_BASE_IMAGE
        #   - DEFAULT_BASE_IMAGE
        #   - DEFAULT_EXTENDED_BASE_IMAGE
        #
        # We keep DEST_BASE_IMAGE unset so it defaults to DEFAULT_BASE_IMAGE or
        # DEFAULT_EXTENDED_BASE_IMAGE.
        #
        # (see https://github.com/galaxyproject/galaxy/blob/957f6f5/lib/galaxy/tool_util/deps/mulled/mulled_build.py#L62-L71)
        #
        # We want to use the manifests that were pushed to the docker registry
        # running on localhost (which simulates eventually using manifests from
        # quay.io)
        source images/image_config.sh
        export DEFAULT_BASE_IMAGE="localhost:5000/${BASE_BUSYBOX_IMAGE_NAME}:${BASE_TAG}"
        export DEFAULT_EXTENDED_BASE_IMAGE="localhost:5000/${BASE_DEBIAN_IMAGE_NAME}:${BASE_TAG}"

        export BUILD_ENV_IMAGE="localhost:5000/${BUILD_ENV_IMAGE_NAME}:${BIOCONDA_IMAGE_TAG}"
        export CREATE_ENV_IMAGE="localhost:5000/${CREATE_ENV_IMAGE_NAME}:${BIOCONDA_IMAGE_TAG}"


        py.test --durations=0 test/ -v --log-level=DEBUG -k "docker" --tb=native

    # END TESTING
    # ------------------------------------------------------------------------
    # START PUSHING IMAGES

    # For these push steps, a repository must first exist on quay.io/bioconda
    # AND that repository must also be configured to allow write access for the
    # appropriate service account. This must be done by a user with admin
    # access to quay.io/bioconda.

  push:
    name: push images
    if: (github.ref == 'refs/heads/master') && (needs.detect-existing.outputs.DO_BUILD == 'true')
    runs-on: ubuntu-24.04
    needs: [ test ]

    steps:

    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: push base-debian
      if: ${{ ! needs.base-debian.outputs.TAG_EXISTS_base-debian }}
      run: |
        echo '${{ secrets.QUAY_BIOCONDA_TOKEN }}' | podman login quay.io -u '${{ secrets.QUAY_BIOCONDA_USERNAME }}' --password-stdin
        source images/image_config.sh
        build_and_push_manifest ${BASE_DEBIAN_IMAGE_NAME} ${BASE_TAG} "quay.io/bioconda"
        build_and_push_manifest ${BASE_BUSYBOX_IMAGE_NAME} ${BASE_TAG} "quay.io/bioconda"
        build_and_push_manifest ${CREATE_ENV_IMAGE_NAME} ${BIOCONDA_IMAGE_TAG} "quay.io/bioconda"
        build_and_push_manifest ${BUILD_ENV_IMAGE_NAME} ${BIOCONDA_IMAGE_TAG} "quay.io/bioconda"
